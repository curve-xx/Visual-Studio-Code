@page "/edit-game"
@page "/edit-game/{id:int}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject GamesClient gamesClient
@inject GenresClient genresClient

<PageTitle>@title</PageTitle>
<h3>@title</h3>
@if (game is null)
{
    <p>Loading...</p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@game" FormName="editGame" OnValidSubmit="HandleSubmitAsync" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="game.Name" class="form-control" />
                    <ValidationMessage For="@(() => game.Name)" />
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre:</label>
                    <InputSelect id="genre" @bind-Value="game.GenreId" class="form-select">
                        <option value="">Select a genre</option>
                        @if (genres is not null)
                        {
                            foreach (var genre in genres)
                            {
                                <option value="@genre.Id">@genre.Name</option>
                            }
                        }
                        else
                        {
                            <option disabled>Loading genres...</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => game.GenreId)" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="game.Price" class="form-control" />
                    <ValidationMessage For="@(() => game.Price)" />
                </div>
                <div class="mb-3">
                    <label for="releaseDate" class="form-label">Release Date:</label>
                    <InputDate id="releaseDate" @bind-Value="game.ReleaseDate" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
                <a role="button" href="/" class="btn btn-secondary">Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    private GameDetails? game { get; set; }

    private Genre[]? genres;

    private string title { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (game is not null)
        {
            return; // If game is already set, no need to fetch again
        }

        if (Id.HasValue)
        {
            // Fetch game details if Id is provided

            var gameResult = await gamesClient.GetGameDetailsAsync(Id!.Value);
            if (gameResult is not null)
            {
                game = gameResult;
                title = $"Edit {gameResult!.Name}";
            }
            else
            {
                title = "Edit Game";
            }
        }
        else
        {
            game = new GameDetails
            {
                GenreId = string.Empty,
                Name = string.Empty,
                ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow),
            };
            title = "New Game";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        genres = await genresClient.GetGenresAsync();
    }

    private async Task HandleSubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(game, nameof(game));
        // Logic to handle form submission, e.g., saving the game details
        if (Id is null)
        {
            await gamesClient.AddGameAsync(game);
        }
        else
        {
            game.Id = Id.Value; // Ensure the game ID is set for updates
            await gamesClient.UpdateGameAsync(game);
        }
        // Navigate back to the home page or game list after saving
        NavigationManager.NavigateTo("/");
    }
}
